#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('dogeun:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/* --------------------  소켓 이벤트  ----------------------- */
const Message = require('../model/chats').Message;
const Room = require('../model/chats').Room;
var io = require('socket.io')(server); //io = 소켓 서버 객체
const room = new Room();
const message = new Message(); 
io.on('connection', socket => {  
    var user_id;
    var room_id;
    //채팅 목록 조회 -DONE
    socket.on('showList', async u_id => { 
      user_id = u_id;
      let roomlist = await room.getRooms(user_id); //현재 사용자id로 사용자가 참여중인 채팅목록 가져오기
      for(let i of roomlist){
        let messageCount = await message.getUnreadCount(i.room_id, user_id);
        i.unread_count = messageCount;
      }
      console.log({roomList: roomlist});
      socket.emit('showListResults', { roomList: roomlist });
    });

    //채팅방 입장  -DONE
    socket.on('enterRoom', async r_id => {  
        room_id = r_id;
        let messagelist = await room.enterRoom(room_id, user_id);
        socket.emit('enterRoomResults', { roomInfos: messagelist });
    });

    socket.on('removeRoom', room_id => {

    });
    
    //메세지 전송
    socket.on('sendMessage', async content => {
        let new_msg = await message.saveMessage(content, user_id, room_id);
        let updated_room = await room.addMessage(new_msg);
        let send = await message.getUserInfo(new_msg.sender_id, user_id);
        send.sender_id = new_msg.sender_id;
        send.content = content;
        if(send.username) {
          send.sender_name = send.username;
          delete send.username;
        } 
        console.log(send);
        socket.emit('sendMessageResults', { newMessage: send });
    });


    //분양희망자와 대화하기 이벤트
    // socket.on('startChat', participant_id => {
    //     let r_id = await room.findRoom(user, participant_id); //현재사용자와 상대방이 만든 방이 있는지 찾기
    //     if(r_id===-1) {  //없으면
    //       let new_room = await room.createRoom(user, participant_id); //방 새로 만들기
    //       room_id = new_room._id; //room_id는 새로 만들어진 방의 id
    //     }
    //     else room_id = r_id; //있으면 기존에 있던 방 id가 room_id
    //     let messagelist = await room.enterRoom(room_id, user_id);
    //     socket.emit('enterRoomResults', { roomInfos: messagelist });
    // });
});