#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('dogeun:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/* --------------------  소켓 이벤트  ----------------------- */
const Message = require('../model/chats').Message;
const Room = require('../model/chats').Room;
var io = require('socket.io')(server); //io = 소켓 서버 객체
// const Logger = require('socket.io-logger')();
// var stream = fs.createWriteStream('../Logs/socket-logs.log', {flags:'a'});
// var format = function (sock, args) {
//   return {
//     sock: sock.id,
//     name: args.shift(),
//     data: args
//   };
// };
// var logger = Logger();
// logger.stream(stream);
// logger.format(format);
// io.use(logger);

const room = new Room();
const message = new Message(); 
io.on('connection', socket => {  
    console.log('클라이언트 소켓 연결');
    var user_id;
    var room_id;
    console.log('클라이언트 소켓 연결');
    //채팅 목록 조회 -DONE     TODO: 채팅목록에서 채팅방입장&분양희망자와 대화하기는 같은 이벤트로 처리 가능
    socket.on('showList', async u_id => { 
      user_id = u_id;
      let roomlist = await room.getRooms(user_id); //현재 사용자id로 사용자가 참여중인 채팅목록 가져오기
      for(let i of roomlist){
        let messageCount = await message.getUnreadCount(i.room_id, user_id);
        i.unread_count = messageCount;
      }
      console.log('showList 호출 uid: ', u_id);
    	console.log('roomList: ', roomlist);
      socket.emit('showListResults', { roomList: roomlist });
    });

    //채팅방 입장  -DONE
    socket.on('enterRoom', async r_id => {  
        room_id = r_id;
        let messagelist = await room.enterRoom(room_id, user_id);
        console.log('enterRoom 호출 r_id: ', r_id);
        console.log( 'messaglist: ',messagelist);
        socket.emit('enterRoomResults', { roomInfos: messagelist });
    });

    //채팅방 삭제하기(나가기)
    socket.on('removeRoom', async r_id => {
        let exist = await room.beforeRemove(user_id, r_id);
        console.log('request room_id: ', r_id);
        console.log('removeRoom: ', exist);
        if(exist==0) socket.emit('removeRoomResults', { result: false });
        else {
          await room.deleteRoom(user_id, r_id);
          socket.emit('removeRoomResults',{ result: true });
        }
    });
    
    //메세지 전송 
    socket.on('sendMessage', async obj => {
        console.log('클라이언트에서 보낸 객체: ', obj);
        let sender_info = await message.getUserInfo(obj.user_id); // 메세지 전송한 사람의 프로필, 이름, user_id
        sender_info.content = obj.content; //객체에 메세지 내용 추가
        if(sender_info.sender_id==user_id) sender_info.side = 'right'; //보낸 사용자가 본인이면 오른쪽
        else sender_info.side = 'left'; //아니면 왼쪽
        //보낸 메세지의 채팅방이 현재 채팅방이면 sender_info 로 이벤트 호출
        if(obj.room_id==room_id) {
          console.log('sendMessageResults 호출: ', sender_info);
          socket.emit('sendMessageResults', {newMessage: sender_info});
        }
        let new_msg = await message.saveMessage(obj.content, obj.user_id, obj.room_id); //메세지 컬렉션에 메세지 저장
        let updated_room = await room.addMessage(new_msg); //채팅방 컬렉션/에 메세지 추가    
    });


    //분양희망자와 대화하기 이벤트 -DONE
    socket.on('startChat', async participant_id => {
        let r_id = await room.findRoom(user_id, participant_id); //현재사용자와 상대방이 만든 방이 있는지 찾기
        if(r_id===-1) {  //없으면
          let new_room = await room.createRoom(user_id, participant_id); //방 새로 만들기
          room_id = new_room._id; //room_id는 새로 만들어진 방의 id
        }
        else room_id = r_id; //있으면 기존에 있던 방 id가 room_id
        let messagelist = await room.enterRoom(room_id, user_id);
        console.log('startChat 호출 participant_id :', participant_id );
        console.log(messagelist);
        socket.emit('enterRoomResults', { roomInfos: messagelist });
    });

    socket.on('disconnect', () => {
        room_id = null;
        user_id = null;
        console.log('클라이언트 소켓 중단');
    });
});
